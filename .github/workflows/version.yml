---
name: Bump and Publish

on:
  push:
    branches:
      - develop

defaults:
  run:
    shell: bash

env:
  LANG: en_US.utf-8
  LC_ALL: en_US.utf-8
  PYTHON_VERSION: '3.8'
  PROJECT_NAME: test-release-actions
  RUNS_ON: ubuntu-20.04

jobs:

  bump_version:
    environment: test_env
    runs-on: ubuntu-20.04
    # Only run this job if the commit message doesn't start with release sentinel.
    if: "!startsWith(github.event.head_commit.message, '[RELEASE]')"
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2.1.7
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

#      - name: 'Get Previous tag'
#        id: previoustag
#        uses: younited/get-previous-tag-action@v1.0.0
#        with:
#          match: v*
##        uses: "WyriHaximus/github-action-get-previous-tag@v1.0.0"
##        with:
##          fallback: v1.0.0
#      - run: echo ${{ steps.previoustag.outputs.result }}
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: |
          poetry install --no-interaction
          # Make sure we don't have something from last time.
          rm dist -rf

      #----------------------------------------------
      # bump version number for patch
      #----------------------------------------------
      - name: Bump Version
        run: |
          # current_tag is the last tagged relese in the repository.   From there
          # we need to remove the v from the begining of the tag.
          current_tag=$(git tag -l "v*" | sort --reverse |sed -n 1p)
          current_tag=${current_tag#?}

          # current_tag is now the version we want to set our poetry version so
          # that we can bump the version
          poetry version ${current_tag}
          poetry version prerelease --no-interaction

          NEW_TAG=v$(poetry version --short)
          echo "The new tag is ${NEW_TAG}"

          # Finally because we want to be able to use the variable in later
          # steps we set a NEW_TAG environmental variable
          echo "NEW_TAG=$(echo ${NEW_TAG})" >> $GITHUB_ENV


          # Because our tags are versioned with v we need to remove it before
          # passing it to poetry.  This allows us to be 100% on tags without worrying
          # about the version in the pyproject.yml file.
          # echo "TAGGED_VERSION=$(echo ${{ steps.previoustag.outputs.tag }} | cut -c 1-)" >> $GITHUB_ENV
#          TAGGED_VERSION=${{ steps.previoustag.outputs.tag }}
#          echo "TAGGED_VERSION before strip: $(TAGGED_VERSION)"
#          TAGGED_VERSION=${TAGGED_VERSION:1}
#          echo "TAGGED_VERSION after strip: $(TAGGED_VERSION)"
          #echo "VERSION IS ${{ env.TAGGED_VERSION}}"
#          poetry version ${TAGGED_VERSION}
#          poetry version prerelease --no-interaction
#          poetry version
#          poetry version --short
#          PROJECT_VERSION=$(poetry version --short)
#          # Copy to github env so we can reference it later in the git tag creation.
#          echo "PROJECT_VERSION=v$PROJECT_VERSION" >> $GITHUB_ENV

      - run: echo "My project version is ${{ env.NEW_TAG}}"
      #---------------------------------------------------------------
      # create build artifacts to be included as part of release
      #---------------------------------------------------------------
      - name: Create build artifacts
        run: |
          poetry build -vvv

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*.gz,dist/*.whl"
          artifactErrorsFailBuild: true
          generateReleaseNotes: true
          prerelease: true
          tag: ${{ env.NEW_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Poetry to use Pypi Repository
        run: |
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry config pypi-token.test-pypi ${{ secrets.TEST_PYPI_TOKEN }}

      - name: Build and publish
        run: |
          poetry publish -r test-pypi
