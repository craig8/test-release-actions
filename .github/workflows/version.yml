---
name: Bump and Publish

on:
  push:
    branches:
      - develop

defaults:
  run:
    shell: bash

env:
  LANG: en_US.utf-8
  LC_ALL: en_US.utf-8
  PYTHON_VERSION: '3.8'
  PROJECT_NAME: test-release-actions
  GITHUB_TOKEN: ${{ secrets.PAT }}
  RUNS_ON: ubuntu-20.04

jobs:

  bump_version:
    environment: test_env
    runs-on: ubuntu-20.04
    # Only run this job if the commit message doesn't start with release sentinel.
    if: "!startsWith(github.event.head_commit.message, '[RELEASE]')"
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"

      - run: echo "${{ steps.previoustag.outputs.tag }}"
#
#      - name: Set up Python ${{ env.PYTHON_VERSION }}
#        id: setup-python
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ env.PYTHON_VERSION }}
#
#      #----------------------------------------------
#      #  -----  install & configure poetry  -----
#      #----------------------------------------------
#      - name: Install Poetry
#        uses: snok/install-poetry@v1
#        with:
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#          installer-parallel: true
#
#      #----------------------------------------------
#      #       load cached venv if cache exists
#      #----------------------------------------------
#      - name: Load cached venv
#        id: cached-poetry-dependencies
#        uses: actions/cache@v2.1.7
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
#      #----------------------------------------------
#      # install dependencies if cache does not exist
#      #----------------------------------------------
#      - name: Install dependencies
#        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#        run: poetry install --no-interaction --no-root
#
#      #----------------------------------------------
#      # install your root project, if required
#      #----------------------------------------------
#      - name: Install library
#        run: poetry install --no-interaction
#
#
#      #----------------------------------------------
#      # bump version number for patch
#      #----------------------------------------------
#      - name: Bump Version
#        run: poetry version prerelease --no-interaction
#
#      - run: git status
#
#      #----------------------------------------------------------------
#      #       get project version from pyproject.toml; store in env var
#      #----------------------------------------------------------------
#      - name: Add version to environment vars
#        run: |
#          PROJECT_VERSION=$(poetry version --short)
#          echo "PROJECT_VERSION=v$PROJECT_VERSION" >> $GITHUB_ENV
#
##      - name: Guardrail to check if tag version matches project version
##        run: |
##          TAG=$(git describe HEAD --tags --abbrev=0)
##          echo $TAG
##          echo $PROJECT_VERSION
##          if [[ "$TAG" != "v$PROJECT_VERSION" ]]; then exit 1; fi
##
#
#      #---------------------------------------------------------------
#      # create build artifacts to be included as part of release
#      #---------------------------------------------------------------
#      - name: Create build artifacts
#        run: |
#          poetry build -vvv
#
##      - name: Commit
##        run: |
##          git config --global user.name 'gh-actions'
##          git config --global user.email '3979063+craig8@users.noreply.github.com'
##          git add pyproject.toml
##          git commit -m "[RELEASE] $PROJECT_VERSION"
##
##      - name: Push changes
##        uses: ad-m/github-push-action@master
##        with:
##          branch: ${{ github.ref }}
##          github_token: ${{ secrets.GITHUB_TOKEN }}
##
##  publish_to_pypi:
##    runs-on: ubuntu-20.04
##    needs: bump_version
##    steps:
#      - uses: ncipollo/release-action@v1
#        with:
#          artifacts: "dist/*.gz,dist/*.whl"
#          artifactErrorsFailBuild: true
#          generateReleaseNotes: true
#          prerelease: true
#          tag: ${{ env.PROJECT_VERSION }}
#          token: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Configure Poetry to use Pypi Repository
#        run: |
#          poetry config repositories.test-pypi https://test.pypi.org/legacy/
#          poetry config pypi-token.test-pypi ${{ secrets.TEST_PYPI_TOKEN }}
#
#      - name: Build and publish
#        run: |
#          poetry publish -r test-pypi
